<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE FBType SYSTEM "http://www.holobloc.com/xml/LibraryElement.dtd" >
<FBType Name="ConveyorCTLRingToken" Comment="Basic Function Block Type" >
  <Identification Standard="61499-2" />
  <VersionInfo Organization="Rockwell Automation" Version="0.2" Author="JHC" Date="2003-12-04" Remarks="Renamed for better indexing." />
  <VersionInfo Organization="Rockwell Automation" Version="0.1" Author="JHC" Date="2002-11-05" Remarks="Corrected missing ST element in Algorithm REQ." />
  <VersionInfo Organization="Rockwell Automation" Version="0.0" Author="JHC" Date="2000-05-30" />
  <CompilerInfo header="package fb.rt.cs725;" >
  </CompilerInfo>
  <InterfaceList>
    <EventInputs>
      <Event Name="INIT" Comment="Initialization Request" >
        <With Var="PE" />
        <With Var="Block" />
        <With Var="Candidate" />
        <With Var="TokenIN" />
        <With Var="PE13" />
      </Event>
      <Event Name="REQ" Comment="Normal Execution Request" >
        <With Var="PE" />
        <With Var="Block" />
        <With Var="Candidate" />
        <With Var="TokenIN" />
        <With Var="PE13" />
      </Event>
      <Event Name="CAS_STOP" >
      </Event>
      <Event Name="CAS_START" >
      </Event>
      <Event Name="TokenGranted" >
        <With Var="TokenIN" />
      </Event>
    </EventInputs>
    <EventOutputs>
      <Event Name="INITO" Comment="Initialization Confirm" >
        <With Var="MotoRotate" />
        <With Var="BlockCon" />
      </Event>
      <Event Name="CNF" Comment="Execution Confirmation" >
        <With Var="MotoRotate" />
        <With Var="BlockCon" />
      </Event>
      <Event Name="STOP" >
      </Event>
      <Event Name="START" >
      </Event>
      <Event Name="TokenGiven" Comment="Signal if Token Release or not" >
        <With Var="TokenOUT" />
      </Event>
    </EventOutputs>
    <InputVars>
      <VarDeclaration Name="PE" Type="BOOL" Comment="Input event qualifier" />
      <VarDeclaration Name="Block" Type="BOOL" />
      <VarDeclaration Name="Candidate" Type="BOOL" />
      <VarDeclaration Name="TokenIN" Type="BOOL" />
      <VarDeclaration Name="PE13" Type="BOOL" />
    </InputVars>
    <OutputVars>
      <VarDeclaration Name="MotoRotate" Type="BOOL" Comment="Output event qualifier" />
      <VarDeclaration Name="BlockCon" Type="BOOL" />
      <VarDeclaration Name="TokenOUT" Type="BOOL" />
    </OutputVars>
  </InterfaceList>
  <BasicFB>
    <InternalVars>
      <VarDeclaration Name="lastPE" Type="BOOL" InitialValue="1" />
      <VarDeclaration Name="lastBlock" Type="BOOL" InitialValue="0" />
    </InternalVars>
    <ECC >
      <ECState Name="START" Comment="Initial State" x="552.94116" y="429.41174" >
      </ECState>
      <ECState Name="INIT" Comment="Initialization" x="1064.7058" y="429.41174" >
        <ECAction Algorithm="INIT" Output="INITO" />
        <ECAction Output="CNF" />
      </ECState>
      <ECState Name="NOTOKEN" x="858.8235" y="788.2353" >
        <ECAction Algorithm="FreeToken" Output="TokenGiven" />
      </ECState>
      <ECState Name="waitCS" Comment="waiting to enter critical section" x="494.11765" y="1517.647" >
      </ECState>
      <ECState Name="HAVETOKEN" x="1329.4117" y="1588.2352" >
      </ECState>
      <ECState Name="enterCS" x="1141.1764" y="2058.8235" >
      </ECState>
      <ECState Name="exitCS" x="2229.4116" y="1317.647" >
      </ECState>
      <ECTransition Source="START" Destination="INIT" Condition="INIT" x="658.8235" y="111.7647" />
      <ECTransition Source="INIT" Destination="NOTOKEN" Condition="1" x="735.2941" y="617.64703" />
      <ECTransition Source="NOTOKEN" Destination="waitCS" Condition="REQ&#38;!PE" Comment="When we want to enter the section" x="247.05882" y="1088.2352" />
      <ECTransition Source="NOTOKEN" Destination="HAVETOKEN" Condition="TokenGranted&#38;!TokenIN" Comment="Other token is granting access" x="747.05884" y="1164.7058" />
      <ECTransition Source="HAVETOKEN" Destination="NOTOKEN" Condition="REQ&#38;PE" Comment="Have the token but dont want to use critical section" x="1300.0" y="1076.4706" />
      <ECTransition Source="waitCS" Destination="enterCS" Condition="TokenGranted&#38;!TokenIN" Comment="Other process is giving access" x="688.2353" y="1729.4117" />
      <ECTransition Source="HAVETOKEN" Destination="enterCS" Condition="REQ&#38;!PE" Comment="The process wants to enter critical section" x="1194.1177" y="1776.4706" />
      <ECTransition Source="exitCS" Destination="INIT" Condition="1" x="2064.7058" y="229.41176" />
      <ECTransition Source="enterCS" Destination="exitCS" Condition="REQ&#38;PE" Comment="All items waiting go through" x="2100.0" y="2064.7058" />
    </ECC>
  <Algorithm Name="INIT" Comment="Initialization algorithm" >
    <ST Text="MotoRotate := TRUE;&#10;Block := FALSE;&#10;&#10;System.out.println(this + &#34; &#34; + MotoRotate);&#10;System.out.println(MotoRotate);&#10;&#10;&#10;&#10;TokenOUT:= FALSE;&#10;" />
  </Algorithm>
  <Algorithm Name="REQ" Comment="Normally executed algorithm" >
    <ST Text="System.out.println(this +  &#34; -> Candidate&#34; + Candidate);&#10;IF Candidate THEN&#10;IF lastPE !:= PE THEN&#10;IF NOT PE THEN&#10;BlockCon:= TRUE;&#10;System.out.println(&#34;BlockCon = true&#34;);&#10;ELSE&#10;BlockCon:=FALSE;&#10;System.out.println(&#34;BlockCon = false&#34;);&#10;END_IF&#10;lastPE := PE;&#10;END_IF&#10;IF lastBlock !:= Block THEN&#10;IF Block THEN&#10;STOP.serviceEvent(this);&#10;MotoRotate := FALSE;&#10;System.out.println(&#34;Cas Stop&#34;);&#10;ELSE&#10;START.serviceEvent(this);&#10;MotoRotate := TRUE;&#10;System.out.println(&#34;Cas Start&#34;);&#10;END_IF&#10;lastBlock := Block;&#10;END_IF&#10;END_IF&#10;" />
  </Algorithm>
  <Algorithm Name="START" >
    <ST Text="MotoRotate:=TRUE;&#10;System.out.println(this + &#34; Start &#34; + MotoRotate);&#10;&#10;System.out.println(&#34;Start &#34; + MotoRotate);&#10;" />
  </Algorithm>
  <Algorithm Name="STOP" >
    <ST Text="MotoRotate := FALSE;&#10;System.out.println(this + &#34; Stop &#34; + MotoRotate);&#10;&#10;System.out.println(&#34;Stop &#34; + MotoRotate);&#10;" />
  </Algorithm>
  <Algorithm Name="FreeToken" Comment="Free the token since we are not using it." >
    <Other Language="Java" Text="TokenOUT.value = false;&#10;" />
  </Algorithm>
  </BasicFB>
</FBType>
